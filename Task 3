#3.Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел. 
Проверить работу исключения на реальном примере. Запрашивать у пользователя данные и заполнять список необходимо только числами. 
Класс-исключение должен контролировать типы данных элементов списка.

Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта, введя, например, команду «stop». При этом скрипт завершается, сформированный список с числами выводится на экран.
Подсказка: для этого задания примем, что пользователь может вводить только числа и строки. Во время ввода пользователем очередного элемента необходимо реализовать проверку типа элемента. Вносить его в список, только если введено число. Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение. При этом работа скрипта не должна завершаться.

class NotNumberError(Exception):
    def _init_(self, text):
        self.text = text

    def _str_(self):
        return self.text


class MyNumbersList (list):
    def _init_(self):
        my_list = []

    def input_append(self, msg):
        v = input(f"{msg}|'stop' для выхода: ")
        result = v != "stop"
        if result:
            try:
                if not v.isdigit():
                    raise NotNumberError(f"'{v}' не число!")
                self.append(int(v))
            except NotNumberError as e:
                print(e)
        return result


if _name_ == '_main_':
    my_numbers = MyNumbersList()
    while my_numbers.input_append("Добавьте число в список"):
        pass

    print(my_numbers)
