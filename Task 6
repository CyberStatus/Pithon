# 6.* Реализовать структуру данных «Товары». Она должна представлять собой список кортежей. Каждый
# кортеж хранит информацию об отдельном товаре. В кортеже должно быть два элемента — номер товара и
# словарь с параметрами (характеристиками товара: название, цена, количество, единица измерения).
# Структуру нужно сформировать программно, т.е. запрашивать все данные у пользователя.
#
# Пример готовой структуры:
# [
# (1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
# (2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}),
# (3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})
# ]
#
# Необходимо собрать аналитику о товарах. Реализовать словарь, в котором каждый ключ — характеристика
# товара, например название, а значение — список значений-характеристик, например список названий товаров.
#
# Пример:
# {
# “название”: [“компьютер”, “принтер”, “сканер”],
# “цена”: [20000, 6000, 2000],
# “количество”: [5, 2, 7],
# “ед”: [“шт.”]
# }

def get_analitics(goods):
    res = defaultdict(list)
    for g in goods:
        for key, val in g[1].items():
            if not val in res[key]:
                res[key].append (val)
    return res

def init_test_goods():
    test_goods = [
        (1, {"название": "компьютер", "цена": 20000, "количество": 5, "eд": "шт."}),
        (2, {"название": "принтер", "цена": 6000, "количество": 2, "eд": "шт."}),
        (3, {"название": "сканер", "цена": 2000, "количество": 7, "eд": "шт."})
    ]
    return test_goods

def init_goods():
    keys = "название, цена, количество, единица измерения".split(", ")
    goods = []
    Input_mode = True
    while Input_mode:
        new_good_no = len(goods)+1
        new_good = (new_good_no, dict.fromkeys(keys))
        for key in keys:
            curr_val = input ("введите "+key+" для нового товара (введите '!@#' - для завершения ввода товаров): ")
            if '!@#' in curr_val:
                Input_mode = False
                break
            new_good[1][key] = curr_val
        if Input_mode:
            goods.append(new_good)
    return goods

#goods = init_test_goods()
goods = init_goods()
analitics = dict (get_analitics(goods))
print (analitics)
