4. Начните работу над проектом «Склад оргтехники». Создайте класс, описывающий склад.
А также класс «Оргтехника», который будет базовым для классов-наследников. 
Эти классы — конкретные типы оргтехники (принтер, сканер, ксерокс). В базовом классе определите параметры, общие для приведённых типов. 
В классах-наследниках реализуйте параметры, уникальные для каждого типа оргтехники.

import math
from collections import defaultdict
import datetime


class Storage:
    store = defaultdict(int)
    inventory_book = []

    def _init_(self, name):
        self.name = name

    def add_equipment(self, item, count):
        self.store[str(item)] += count
        now = datetime.datetime.now()
        self.inventory_book.append((now, 'income', str(item), count))

    def move_equipment(self, item, count, dept):
        self.store[str(item)] -= count
        now = datetime.datetime.now()
        self.inventory_book.append((now, 'outcome', str(item), count, dept))

    def _str_(self):
        output = f'{self.name}:\n'
        for k, q in self.store.items():
            output += f'-{k}:{q}\n'
        return output

    @property
    def history(self):
        output = f'История движений по {self.name}:\n'
        for rec in self.inventory_book:
            output += f'-{rec}\n'
        return output


class OfficeAutomation:
    printable = False
    scannable = False

    def _init_(
            self,
            brand: str,
            vendor: str,
            model: str,
            color: str,
            weight_brutto: float,
            package_dimensions: list,  # Габариты (ШхВхГ) в миллиметрах
    ):
        self.vendor = vendor
        self.model = model
        self.color = color

        self.package_dimensions = package_dimensions

    @property
    def volume_gross(self):
        return math.prod(self.package_dimensions)/1000000000  # в метрах куб

    def _str_(self):
        t = type(self)._name_
        return f"{t} {self.vendor} {self.model} ({self.color})"


class Printer(OfficeAutomation):
    printable = True
    scannable = False

    def _init_(self, *args):
        super()._init_(*args)


class Scanner(OfficeAutomation):
    printable = False
    scannable = True

    def _init_(self, *args):
        super()._init_(*args)


class Copier(OfficeAutomation):
    printable = True
    scannable = True

    def _init_(self, *args):
        super()._init_(*args)


if _name_ == '_main_':
    p1 = Printer("Epson", "China", "XP-400", "white",  4.1, [391, 145, 300])
    s1 = Scanner("Canon", "China", "CanoScan LiDE 400", "black",
                 1.7, [250, 39, 365])
    st = Storage('Мой склад')
    st.add_equipment(p1, 1)
    st.add_equipment(s1, 2)
    st.move_equipment(s1, 1, "office")
    print(st)
    print(st.history)
